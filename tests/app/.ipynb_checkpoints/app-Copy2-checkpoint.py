import spotipy
from spotipy.oauth2 import SpotifyOAuth
import librosa
import streamlit as st
import pprint

# Configurar a p√°gina
st.set_page_config(page_title="Minha Aplica√ß√£o Streamlit", page_icon="./file/_d3fc50e1-94f8-4676-a898-dcfbef9ef0f8.jpeg")

# Exibir logo
logo = "./file/_6fcb1e6b-6203-49f8-96b0-97652c5fe0a6.jpeg"  # Substitua pelo caminho da sua imagem
st.image(logo, width=700)  # Voc√™ pode ajustar a largura conforme necess√°rio

st.markdown(
    """
    <h2 style="font-size: 22px;">Encontrar m√∫sicas semelhantes √†s que voc√™ ama s√≥ aqui no Biti :)</h2>
    """, 
    unsafe_allow_html=True
)

st.markdown('---')

st.header('√â novo(a) aqui?')
with st.expander('>>> Clique Aqui!'):
    st.write(""" Hei... Seja Bem-vindo(a)! Voc√™ est√° a um passo de descobrir uma infinidade de m√∫sicas novas. Esta aplica√ß√£o te ajuda a encontrar hits semelhantes aos que voc√™ gosta no Spotify. O Spotify tem total zelo pelos direitos autorais dos conte√∫dos de sua plataforma. Para conseguir obter recomenda√ß√µes, voc√™ precisa fornecer dois dados de autentica√ß√£o de usu√°rio v√°lidos no Spotify. Siga os passos do tutorial a seguir que, rapidinho, passamos daqui.""")


#==> Campo de entrada de texto
in_client_id = st.text_input("Digite o seu Cliente ID:")

#==> Campo de entrada num√©rica
in_client_secret = st.text_input("Digite o seu Cliente Secret:")

#==> Definindo porta
porta_selecionada = st.selectbox(
    "Escolha uma porta:",
    [8082, 8089, 8090]
)





# Sidebar para navega√ß√£o
st.sidebar.title("Navega√ß√£o")
page = st.sidebar.radio("Escolha uma p√°gina:", ["Home", "Sobre", "Contato"])

# L√≥gica para diferentes p√°ginas
if page == "Home":
    st.header("P√°gina Inicial")
    st.write("Bem-vindo √† p√°gina inicial da aplica√ß√£o.")
    
elif page == "Sobre":
    st.header("Sobre")
    st.write("Esta aplica√ß√£o foi criada para demonstrar a navega√ß√£o.")
    
elif page == "Contato":
    st.header("Contato")
    st.write("Voc√™ pode entrar em contato pelo e-mail exemplo@dominio.com.")




# Configurar credenciais do Spotify
sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
    client_id="90f6e5fda01e4b67a02038e59d92399a",
    client_secret="8eccd12384384becbda6c0c6db8b92e1",
    redirect_uri="http://localhost:8889/callback",
    scope="user-library-read"
))

def get_audio_analysis(track_id):
    return sp.audio_analysis(track_id)  # Chama a an√°lise de √°udio

# Exemplo de chamada para uma m√∫sica espec√≠fica
track_id = '5pAflWrIzq6wChGbMH7Dal'  # Apenas o ID da faixa
audio_analysis = get_audio_analysis(track_id)

# Imprime a an√°lise de √°udio detalhada
# pprint.pp(audio_analysis)



def recommend_similar_tracks(track_id):
    recommendations = sp.recommendations(seed_tracks=[track_id], limit=100)
    return recommendations['tracks']

#Exemplo de uso:
similar_tracks = recommend_similar_tracks(track_id)
for track in similar_tracks:
    print(track['name'], "-", track['artists'][0]['name'])



# Interface com Streamlit
st.title("Vai brota hit a√≠ üí•")

# Input para o usu√°rio fornecer o link da m√∫sica
track_url = st.text_input("Digite a URL da m√∫sica no Spotify:")

if track_url:
    # Extrair o ID da m√∫sica a partir do link
    track_id = track_url.split("/")[-1].split("?")[0]

    # # Mostrar os dados recuperados
    # st.write("Recuperando dados da m√∫sica...")
    # audio_features = get_audio_analysis(track_id)
    # st.json(audio_features)

    # Mostrar recomenda√ß√µes
    st.write("Recomendando m√∫sicas semelhantes...")
    similar_tracks = recommend_similar_tracks(track_id)
    for track in similar_tracks:
        st.write(f"{track['name']} - {track['artists'][0]['name']}")
        # st.balloons()


#----------------------





#------------------------------------------------------------------------------------------------------------

# Fun√ß√£o para carregar e analisar m√∫sica local
def analyze_local_track(file_path):
    y, sr = librosa.load(file_path, sr=None)
    tempo, _ = librosa.beat.beat_track(y=y, sr=sr)
    pitches, magnitudes = librosa.core.piptrack(y=y, sr=sr)
    mfcc = librosa.feature.mfcc(y=y, sr=sr)
    
    return {
        "tempo": tempo,
        "pitches": pitches,
        "mfcc": mfcc
    }

#-------------------------------------



#-------------------------------------

# Fun√ß√£o para recomendar m√∫sicas semelhantes
def recommend_based_on_audio_features(tempo, genero_da_musica='pop'):    
    recommendations = sp.recommendations(seed_genres=[genero_da_musica], limit=100, target_tempo=tempo)
    return recommendations['tracks']

# Interface do Streamlit
st.title("Seleciona aquela favorita ü§ó")

#-----------------------------------------------------------

# Lista de g√™neros musicais dispon√≠veis no Spotify
genres = [
    'pop', 'rock', 'hip-hop', 'jazz', 'classical', 'blues', 'country', 'dance',
    'electronic', 'funk', 'soul', 'indie', 'k-pop', 'metal', 'reggae', 'r&b',
    'salsa', 'techno', 'trance', 'latino'
]

# Selectbox para escolher o g√™nero
genero_escolhido = st.selectbox("Escolha um g√™nero musical", genres)


#--------------------------------------------

uploaded_file = st.file_uploader("Selecione uma m√∫sica (MP3) em no bot√£o (Broser files) ‚è©‚è©‚è©", type=["mp3"])

if uploaded_file:
    with open("temp_music.mp3", "wb") as f:
        f.write(uploaded_file.getbuffer())
    
    st.write("Analisando a m√∫sica...")
    audio_features = analyze_local_track("temp_music.mp3")
    # st.write(f"Tempo: {audio_features['tempo']}")

    st.write("Recomendando m√∫sicas semelhantes...")
    similar_tracks = recommend_based_on_audio_features(audio_features['tempo'], genero_escolhido)
    
    for track in similar_tracks:
        st.write(f"{track['name']} - {track['artists'][0]['name']}")